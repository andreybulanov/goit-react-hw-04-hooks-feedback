{"version":3,"sources":["Components/Buttons/Buttons.styled.jsx","Components/Buttons/Buttons.jsx","Components/Statistic/Statistic.styled.jsx","Components/Statistic/Statistic.jsx","Components/Notification/Notification.styled.jsx","Components/Notification/Notification.jsx","Components/Section/Section.styled.jsx","Components/Section/Section.jsx","App.js","index.js"],"names":["ButtonStyle","styled","button","Button","options","onLeaveFeedback","map","option","type","onClick","protoTypes","PropTypes","array","onLeavFeedback","func","Text","p","TotalNumber","span","Number","Statistic","good","neutral","bad","total","positivePercentage","Notification","massage","Title","h2","Section","title","children","App","useState","setGood","setNeutral","setBad","Object","keys","feedback","state","Math","round","countPositiveFeedbackPercentage","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAEaA,EAAcC,IAAOC,OAAV,yP,OCEXC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAClBD,EAAQE,KAAI,SAAAC,GAAM,OACd,cAACP,EAAD,CAAaQ,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAvE,SACKA,GAD2BA,OAKxCJ,EAAOO,WAAa,CAChBN,QAASO,IAAUC,MACnBC,eAAgBF,IAAUG,MCXvB,I,IAAMC,EAAOd,IAAOe,EAAV,iHAOJC,EAAchB,IAAOiB,KAAV,gDAIXC,EAASlB,IAAOiB,KAAV,gDCTNE,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACvB,gCACE,eAACV,EAAD,mBACQ,IACN,cAAC,EAAD,UACE,cAACE,EAAD,UAAcI,SAGlB,eAACN,EAAD,sBACW,IACT,cAAC,EAAD,UACE,cAACE,EAAD,UAAcK,SAGlB,eAACP,EAAD,kBACO,IACL,cAAC,EAAD,UACE,cAACE,EAAD,UAAcM,SAGlB,eAACR,EAAD,qBACS,cAAC,EAAD,UAASS,OAElB,eAACT,EAAD,iCACqB,eAAC,EAAD,WAASU,EAAT,cC1BZV,EAAOd,IAAOe,EAAV,+FCEJU,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACxB,cAAC,EAAD,UAAOA,KCHEC,EAAQ3B,IAAO4B,GAAV,iGCELC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACnB,qCACI,cAACJ,EAAD,UAAQG,IACR,8BAAMC,QCDC,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KAyBMjC,EAAUkC,OAAOC,KAAK,CAAClB,OAAMC,UAASC,QAE5C,OACI,gCACE,cAAC,EAAD,CAASQ,MAAM,wBAAf,SACE,cAAC,EAAD,CACE3B,QAASA,EACTC,gBA9Bc,SAACmC,GACvB,OAAQA,GACN,IAAK,OAASL,GAAQ,SAACM,GAAD,OAAWA,EAAQ,KACzC,MAEC,IAAK,UAAYL,GAAW,SAACK,GAAD,OAAWA,EAAQ,KAChD,MAEC,IAAK,MAAQJ,GAAO,SAACI,GAAD,OAAWA,EAAQ,KACxC,MACA,QAAS,aAuBNpB,GAAQC,GAAWC,EAAM,EACxB,cAAC,EAAD,CAASQ,MAAM,YAAf,SACE,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAxBHH,EAAOC,EAAUC,EAyBdE,mBAtB6B,WACvC,IAAMD,EAAQH,EAAOC,EAAUC,EAC/B,OAAOmB,KAAKC,MAAc,IAAPtB,EAAcG,GAoBHoB,OAIxB,cAAC,EAAD,CAAcC,QAAQ,yBClDhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAGFgB,SAASC,eAAe,W","file":"static/js/main.79b84cb6.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const ButtonStyle = styled.button`\r\npadding: 15px;\r\nmargin-left: 15px;\r\nbackground-color: white;\r\nfont-size: 20px;\r\nborder-radius: 40%;\r\ncolor: green;\r\nfont-weight: 700;\r\n&:hover {\r\n  background-color: while;\r\n}\r\n&:active {\r\n  background-color: yellow;\r\n}\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ButtonStyle } from './Buttons.styled';\r\n\r\nexport const Button = ({ options, onLeaveFeedback }) =>\r\n    options.map(option => (\r\n        <ButtonStyle type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\r\n            {option}\r\n        </ButtonStyle>\r\n    ));\r\n\r\nButton.protoTypes = {\r\n    options: PropTypes.array,\r\n    onLeavFeedback: PropTypes.func,\r\n};\r\n\r\n\r\n\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\n  font-size: 20px;\r\n  color: blue;\r\n  font-weight: bold;\r\n  margin: 5px 0 5px 24px;\r\n`;\r\n\r\nexport const TotalNumber = styled.span`\r\n  font-size: 20px;\r\n`;\r\n\r\nexport const Number = styled.span`\r\n  font-size: 20px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text, TotalNumber, Number } from './Statistic.styled';\r\n\r\nexport const Statistic = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <Text>\r\n      Good:{' '}\r\n      <Number>\r\n        <TotalNumber>{good}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Neutral:{' '}\r\n      <Number>\r\n        <TotalNumber>{neutral}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Bad:{' '}\r\n      <Number>\r\n        <TotalNumber>{bad}</TotalNumber>\r\n      </Number>\r\n    </Text>\r\n    <Text>\r\n      Total: <Number>{total}</Number>\r\n    </Text>\r\n    <Text>\r\n      Positive feedback: <Number>{positivePercentage}%</Number>\r\n    </Text>\r\n  </div>\r\n);\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};","import styled from '@emotion/styled';\r\n\r\nexport const Text = styled.p`\r\npadding: 24px;\r\nfont-size: 24px;\r\ncolor: red;\r\nfont-weight: bold;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text } from './Notification.styled';\r\n\r\nexport const Notification = ({ massage }) => (\r\n    <Text>{massage}</Text>\r\n)\r\n\r\nNotification.propTypes = {\r\n    massage: PropTypes.string\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const Title = styled.h2`\r\nmargin: 24px;\r\nfont-size: 34px;\r\ncolor: tomato;\r\nfont-weight: bold;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Title } from '../Section/Section.styled';\r\n\r\nexport const Section = ({ title, children }) => (\r\n    <>\r\n        <Title>{title}</Title>\r\n        <div>{children}</div>\r\n    </>\r\n        \r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.element,\r\n}","import { useState } from \"react\";\nimport { Button } from \"./Components/Buttons/Buttons.jsx\";\nimport { Statistic } from \"./Components/Statistic/Statistic.jsx\";\nimport { Notification } from \"./Components/Notification/Notification.jsx\";\nimport { Section } from \"./Components/Section/Section.jsx\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = (feedback) => {\n    switch (feedback) {\n      case \"good\" : setGood((state) => state + 1);\n      break;\n\n       case \"neutral\" : setNeutral((state) => state + 1);\n      break;\n\n       case \"bad\" : setBad((state) => state + 1);\n      break;\n      default: return;\n    } \n  };\n\n   const countTotalFeedback = () => {\n    return good + neutral + bad;\n   };\n  \n  const  countPositiveFeedbackPercentage = () => {\n    const total = good + neutral + bad;\n    return Math.round((good * 100) / total);\n  };\n\n  const options = Object.keys({good, neutral, bad});\n\n  return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <Button\n            options={options}\n            onLeaveFeedback={handleIncrement}\n          />\n        </Section>\n        {good || neutral || bad > 0 ? (\n          <Section title=\"Statistic\">\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </div>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}